AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating an Amazon EKS cluster in eu-north-1 region
Parameters:
  ClusterName:
    Type: String
    Default: my-eks-cluster-2
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  Subnet01Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for subnet 01 within the VPC
  Subnet02Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for subnet 02 within the VPC
  Subnet03Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for subnet 03 within the VPC
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-north-1a
      CidrBlock: !Ref Subnet01Block
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
  Subnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-north-1b
      CidrBlock: !Ref Subnet02Block
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
  Subnet03:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-north-1c
      CidrBlock: !Ref Subnet03Block
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet01
  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet02
  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet03
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.29'
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
        SubnetIds:
          - !Ref Subnet01
          - !Ref Subnet02
          - !Ref Subnet03
  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
      Policies:
        - PolicyName: EKSDescribeClusterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: '*'
        - PolicyName: efs-csi-custom
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "elasticfilesystem:DescribeMountTargets"
                  - "elasticfilesystem:ClientMount"
                  - "elasticfilesystem:ClientWrite"
                Resource: "*"
        - PolicyName: Node-EKS-repo-perms-custom
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub ${ClusterName}-ng
      NodeRole: !GetAtt NodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 2
      Subnets:
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03
      InstanceTypes:
        - t3.medium

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref Subnet01
        - !Ref Subnet02
        - !Ref Subnet03

  MyRDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: my-rds-secret
      Description: Secret for RDS database credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "nathan"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  MyDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Custom DB parameter group
      Family: postgres16

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: database-1
      DBInstanceClass: db.t3.micro
      Engine: postgres
      DBName: postgresdb
      AllocatedStorage: '20'
      MasterUsername: !Sub '{{resolve:secretsmanager:${MyRDSSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${MyRDSSecret}::password}}'
      VPCSecurityGroups:
        - !Ref RDSEC2SecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PreferredBackupWindow: 05:47-06:17
      BackupRetentionPeriod: 0
      DBParameterGroupName: !Ref MyDBParameterGroup
      AvailabilityZone: eu-north-1b
      PreferredMaintenanceWindow: fri:04:23-fri:04:53
      MultiAZ: false
      AutoMinorVersionUpgrade: true
      LicenseModel: postgresql-license
      PubliclyAccessible: false
      StorageType: gp2
      StorageEncrypted: true
      KmsKeyId: arn:aws:kms:eu-north-1:992382406887:key/5b537e93-89dc-4945-81d3-3f5149ebe666
      CopyTagsToSnapshot: true
      MonitoringInterval: 0
      DeletionProtection: false
    DependsOn: MyRDSSecret

  RDSEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group attached to database-1 to allow EKS worker nodes to connect to the database. Modification could lead to connection loss.
      VpcId: !Ref VPC
      GroupName: rds-eks-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcBlock
      Tags:
        - Key: Name
          Value: RDSEKSSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EFS access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: !Ref VpcBlock

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      BackupPolicy:
        Status: ENABLED
      FileSystemTags:
        - Key: Name
          Value: EFS-FileSystem

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet01
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet02
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet03
      SecurityGroups:
        - !Ref EFSSecurityGroup

Outputs:
  FileSystemId:
    Description: File System ID
    Value: !Ref EFSFileSystem
  ClusterName:
    Description: The name of the EKS cluster
    Value: !Ref EKSCluster
  ClusterEndpoint:
    Description: The endpoint for the EKS cluster API
    Value: !GetAtt EKSCluster.Endpoint
